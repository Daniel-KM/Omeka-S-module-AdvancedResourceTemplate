<?php
/**
 * @var \Laminas\View\Renderer\PhpRenderer $this
 * @var array $values
 * @var array $templateProperties If any.
 */

// TODO Replace with event 'rep.resource.display_values'.

$plugins = $this->getHelperPluginManager();
$url = $plugins->get('url');
$escape = $plugins->get('escapeHtml');
$translate = $plugins->get('translate');
$escapeAttr = $plugins->get('escapeHtmlAttr');

if ($this->status()->isSiteRequest()) {
    $siteSetting = $plugins->get('siteSetting');
    $labelInfo = $siteSetting('property_label_information');
    $showLocale = (bool) $siteSetting('show_locale_label', true);
    $filterLocale = (bool) $siteSetting('filter_locale_values');
    $lang = $plugins->get('lang')();
    $langHtml = $filterLocale ? $lang : null;
} else {
    $setting = $plugins->get('setting');
    $labelInfo = $setting('property_label_information');
    $showLocale = true;
    $filterLocale = false;
    $lang = null;
    $langHtml = null;
}

$displayPropertyValues = function($term, $propertyData) use ($templateProperties, $translate, $escape, $labelInfo, $showLocale, $filterLocale, $langHtml) {
// This is a copy of the core view.
?>
<div class="property">
    <h4>
    <?php if ($propertyData['alternate_label']): ?>
    <?= $escape($propertyData['alternate_label']) ?>
    <?php else: ?>
    <?= $escape($translate($propertyData['property']->label())) ?>
    <?php endif; ?>
    <?php if ('term' === $labelInfo): ?>
    <span class="field-term">(<?= $escape($term) ?>)</span>
    <?php elseif ('vocab' === $labelInfo): ?>
    <span class="field-term">(<?= $escape($propertyData['property']->vocabulary()->label()) ?>)</span>
    <?php endif; ?>
    </h4>
    <div class="values">
    <?php foreach ($propertyData['values'] as $value): ?>
        <?php
        $valueType = $value->type();
        $valueLang = $value->lang();
        $class = ['value'];
        if ('resource' == $valueType || strpos($valueType, 'resource') !== false) {
            $class[] = 'resource';
            $class[] = $escape($value->valueResource()->resourceName());
        } elseif ('uri' == $valueType) {
            $class[] = 'uri';
        }
        if (!$value->isPublic()) {
            $class[] = 'private';
        }
        ?>
        <?php if (!$filterLocale || $valueLang == '' || strcasecmp($valueLang, $lang) == 0): ?>
        <div class="<?= implode(' ', $class) ?>" lang="<?= $escape($valueLang) ?>">
            <?php if ($showLocale && $valueLang): ?>
            <span class="language"><?= $valueLang ?></span>
            <?php endif; ?>
            <?= $value->asHtml($langHtml) ?>
        </div>
        <?php endif; ?>
    <?php endforeach; ?>
    </div>
</div>
<?php };

// Check and prepare values when they have multiple labels for the same property.
$hasMultipleLabels = false;
if (count($templateProperties)) {
    $dataTypesLabels = [];
    foreach ($templateProperties as $rtp) foreach ($rtp->data() ?: [$rtp] as $rtpData) {
        $property = $rtp->property();
        $term = $property->term();
        $defaultLabel = $translate($property->label());
        $dataTypesLabels[$term]['default'] = $defaultLabel;
        $label = $rtpData->alternateLabel() ?: $defaultLabel;
        $dataTypesLabels[$term] = array_merge($dataTypesLabels[$term], array_fill_keys($rtpData->dataTypes(), $label));
        if (count(array_unique($dataTypesLabels[$term])) > 1) {
            $hasMultipleLabels = true;
        }
    }
}

if ($hasMultipleLabels):
    // The template has specific labels for data types, so gather values.
    // It is the same, except the sub-loop to get the label by data type.
    $valuesWithLabel = [];
    foreach ($values as $term => $propertyData) foreach ($propertyData['values'] as $value) $valuesWithLabel[$term][$dataTypesLabels[$term][$value->type()] ?? $dataTypesLabels[$term]['default'] ?? $translate($propertyData['property']->label())]['values'][] = $value;
    foreach ($valuesWithLabel as $term => $data) foreach ($data as $label => $propertyData):
        $propertyData['property'] = $values[$term]['property'];
        $propertyData['alternate_label'] = $label;
        $propertyData['alternate_comment'] = $values[$term]['alternate_comment'];
        echo $displayPropertyValues($term, $propertyData, $label);
    endforeach;
else:
    // This is the default resource-values template.
    foreach ($values as $term => $propertyData):
        echo $displayPropertyValues($term, $propertyData);
    endforeach;
endif;
