<?php
/**
 * @var \Laminas\View\Renderer\PhpRenderer $this
 * @var array $values
 * @var array $templateProperties
 */

$translate = $this->plugin('translate');
$escape = $this->plugin('escapeHtml');

$labelInfo = $this->status()->isSiteRequest() ? $this->siteSetting('property_label_information') : $this->setting('property_label_information');

$displayPropertyValues = function($term, $propertyData) use ($templateProperties, $translate, $escape, $labelInfo) {
// This is a copy of the core view.
?>
<div class="property">
    <h4>
    <?php if ($propertyData['alternate_label']): ?>
    <?= $escape($propertyData['alternate_label']) ?>
    <?php else: ?>
    <?= $escape($translate($propertyData['property']->label())) ?>
    <?php endif; ?>
    <?php if ('term' === $labelInfo): ?>
    <span class="field-term">(<?= $escape($term) ?>)</span>
    <?php elseif ('vocab' === $labelInfo): ?>
    <span class="field-term">(<?= $escape($propertyData['property']->vocabulary()->label()) ?>)</span>
    <?php endif; ?>
    </h4>
    <div class="values">
    <?php foreach ($propertyData['values'] as $value): ?>
        <?php
        $valueType = $value->type();
        $class = ['value'];
        if ('resource' == $valueType || strpos($valueType, 'resource') !== false) {
            $class[] = 'resource';
            $class[] = $escape($value->valueResource()->resourceName());
        } elseif ('uri' == $valueType) {
            $class[] = 'uri';
        }
        if (!$value->isPublic()) {
            $class[] = 'private';
        }
        ?>
        <div class="<?= implode(' ', $class) ?>" lang="<?= $escape($value->lang()) ?>">
            <?php if ($language = $value->lang()): ?>
            <span class="language"><?= $language ?></span>
            <?php endif; ?>
            <?= $value->asHtml() ?>
        </div>
    <?php endforeach; ?>
    </div>
</div>
<?php };

// Check and prepare values when they have multiple labels for the same property.
$hasMultipleLabels = false;
if (count($templateProperties)):
    $dataTypesLabels = [];
    foreach ($templateProperties as $rtp) foreach ($rtp->data() ?: [$rtp] as $rtpData):
        $property = $rtp->property();
        $term = $property->term();
        $defaultLabel = $translate($property->label());
        $dataTypesLabels[$term]['default'] = $defaultLabel;
        $label = $rtpData->alternateLabel() ?: $defaultLabel;
        $dataTypesLabels[$term] = array_merge($dataTypesLabels[$term], array_fill_keys($rtpData->dataTypes(), $label));
        if (count(array_unique($dataTypesLabels[$term])) > 1) $hasMultipleLabels = true;
    endforeach;
endif;

if ($hasMultipleLabels):
    // The template has specific labels for data types, so gather values.
    // It is the same, except the sub-loop to get the label by data type.
    $valuesWithLabel = [];
    foreach ($values as $term => $propertyData) foreach ($propertyData['values'] as $value) $valuesWithLabel[$term][$dataTypesLabels[$term][$value->type()] ?? $dataTypesLabels[$term]['default'] ?? $translate($propertyData['property']->label())]['values'][] = $value;
    foreach ($valuesWithLabel as $term => $data) foreach ($data as $label => $propertyData):
        $propertyData['property'] = $values[$term]['property'];
        $propertyData['alternate_label'] = $label;
        $propertyData['alternate_comment'] = $values[$term]['alternate_comment'];
        echo $displayPropertyValues($term, $propertyData, $label);
    endforeach;
else:
    // This is the default resource-values template.
    foreach ($values as $term => $propertyData):
        echo $displayPropertyValues($term, $propertyData);
    endforeach;
endif;
